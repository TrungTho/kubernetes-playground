name: Release Chart

on:
  workflow_run:
    workflows: [Linting and Testing]
    types: [completed]
    branches:
      - main

permissions:
  id-token: write
  contents: write
  pull-requests: write
  packages: write

jobs:
  release-chart:
    name: Release new chart
    runs-on: ubuntu-latest
    env:
      CHART_DIR: universal-helm/charts
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Prepare values
        id: prepare-vars
        run: |
          owner=$(cut -d '/' -f 1 <<< "$GITHUB_REPOSITORY");
          echo "owner=$owner" >> $GITHUB_OUTPUT
          repo=$(cut -d '/' -f 2 <<< "$GITHUB_REPOSITORY");
          echo "repo=$repo" >> $GITHUB_OUTPUT          
          token=${{ secrets.GITHUB_TOKEN }};
          echo "token=$token" >> $GITHUB_OUTPUT

      - name: Get changes files
        id: get-changes
        run: |
          changed_files=`git diff --name-only HEAD HEAD~ | tr '\n' ' '`;
          echo "changed_files changes" $changed_files;
          echo "changed_files=$changed_files" >> $GITHUB_OUTPUT

      - name: Release charts
        env:
          CHANGED_FILES: ${{ steps.get-changes.outputs.changed_files }}
          REGISTRY_ENDPOINT: "ghcr.io/trungtho/kubernetes-playground"
        run: |
          helm registry login ${{ env.REGISTRY_ENDPOINT }} --username no-need --password ${{ steps.prepare-vars.outputs.token}} && \

          cd ${{ env.CHART_DIR }};
          ls;
          for chart in *
          do
            if echo ${{ env.CHANGED_FILES }} | grep $chart; then   
              result=$(helm package $chart);
              packaged_chart=$(echo $result | awk '{print $NF}');
              echo "$packaged_chart";
              helm push $packaged_chart oci://${{ env.REGISTRY_ENDPOINT }};
              echo "::notice:: Released $chart successfully!"
            else
              echo "::notice:: Skip releasing chart $chart"
            fi
          done
